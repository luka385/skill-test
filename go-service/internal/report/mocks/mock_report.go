// Code generated by MockGen. DO NOT EDIT.
// Source: internal/report/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/luke385/skill-test/internal/report/usecase/domain"
)

// MockStudentRepository is a mock of StudentRepository interface.
type MockStudentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStudentRepositoryMockRecorder
}

// MockStudentRepositoryMockRecorder is the mock recorder for MockStudentRepository.
type MockStudentRepositoryMockRecorder struct {
	mock *MockStudentRepository
}

// NewMockStudentRepository creates a new mock instance.
func NewMockStudentRepository(ctrl *gomock.Controller) *MockStudentRepository {
	mock := &MockStudentRepository{ctrl: ctrl}
	mock.recorder = &MockStudentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentRepository) EXPECT() *MockStudentRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockStudentRepository) GetByID(arg0 string) (*domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStudentRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStudentRepository)(nil).GetByID), arg0)
}

// MockFileGenerator is a mock of FileGenerator interface.
type MockFileGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockFileGeneratorMockRecorder
}

// MockFileGeneratorMockRecorder is the mock recorder for MockFileGenerator.
type MockFileGeneratorMockRecorder struct {
	mock *MockFileGenerator
}

// NewMockFileGenerator creates a new mock instance.
func NewMockFileGenerator(ctrl *gomock.Controller) *MockFileGenerator {
	mock := &MockFileGenerator{ctrl: ctrl}
	mock.recorder = &MockFileGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileGenerator) EXPECT() *MockFileGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockFileGenerator) Generate(arg0 *domain.Student) (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockFileGeneratorMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockFileGenerator)(nil).Generate), arg0)
}

// GetContentType mocks base method.
func (m *MockFileGenerator) GetContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContentType indicates an expected call of GetContentType.
func (mr *MockFileGeneratorMockRecorder) GetContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentType", reflect.TypeOf((*MockFileGenerator)(nil).GetContentType))
}

// GetFileExtension mocks base method.
func (m *MockFileGenerator) GetFileExtension() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileExtension")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFileExtension indicates an expected call of GetFileExtension.
func (mr *MockFileGeneratorMockRecorder) GetFileExtension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileExtension", reflect.TypeOf((*MockFileGenerator)(nil).GetFileExtension))
}
